


【函数作用】
    代码复用性，写一个函数随便传什么参数都可以使用，做某件事情用的，函数不调用自己不执行 
    封装:把一个或多个功能封装到函数里面对外提供一个接口直接调用
 
【return】
    返回值赋值给函数调用公式
    function getNumber(){
        teturn 666
    }
    没有返回值相当于没有给函数赋值返回undefinde   getNumber() = 666  赋值操作
    只能返回一个值若要一次返回多个值利用数组或者对象

【arguments】
    参数内置对象每个函数都有一个arguments 里面存了所有传递进去的实参有多少存多少

【函数表达式】
    也叫作匿名函数
    fun = ()=>{
        将匿名函数赋值给了fun这个变量
    }

【作用域链】
    内部函数访问外部函数的机制称为作用域链 (逐步往上级查找)
    根据函数作用域链的就近法则 我们最终输出的 a = 0 , b = 777,找不到的话报错
    函数上下级调用:在自己的同级下调用自己
    var a = 8 //零级链包含 a = 8 , 函数fn1
    function one() {  //一级链包含  a = 7 , b = 8 , 函数two
        var a = 7
        var b = 8
        function two() { //二级连包含 a = 666 , b = 777 , 函数three
            var a = 666
            var b = 777
            function three() { //三级链包含 a = 0
                var a = 0
                console.log(a)
                console.log(b)
            }
            three()
        }
        two()
    }
    one()

【预解析概念】
    ---js引擎会将所有(var定义的变量) 和 (function函数)
    提升到当前作用域的最前面再去执行(只提升声明不提供赋值)
    步骤:先预解析再执行按照先后顺序从上往下依次执行